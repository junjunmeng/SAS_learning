*** 6.1 ***;
data biom;
    input dose resp @@;
    datalines;
 0.05  1.3538
 0.05  0.1550
 0.05 -0.0708
 0.05  0.5837
 0.05  0.9626
 0.05  0.3814
 0.05 -0.0047
 0.05  0.5193
 0.05 -0.3633
 0.05  0.3389
 0.05  0.1456
 0.05  0.4428
 0.05 -0.0219
 0.05  0.3726
 0.05  1.5290
 0.05  0.1495
 0.05  0.3741
 0.05  1.0117
 0.05  0.2813
 0.05  0.9947
 0.20  1.1981
 0.20  1.5677
 0.20 -0.1556
 0.20  0.2066
 0.20  1.8535
 0.20  0.9957
 0.20  2.4522
 0.20 -0.5204
 0.20  0.0489
 0.20  0.6331
 0.20  0.5284
 0.20  0.4229
 0.20  1.2333
 0.20  1.8678
 0.20  1.0578
 0.20  0.3453
 0.20  0.4049
 0.20  0.4842
 0.20  0.5712
 0.20  1.0107
 0.60  1.1722
 0.60  0.6676
 0.60  1.7777
 0.60  0.3097
 0.60  0.0565
 0.60  0.9001
 0.60  0.7383
 0.60  0.2279
 0.60  1.3851
 0.60  0.9124
 0.60  0.2993
 0.60  0.2789
 0.60  0.2700
 0.60  0.5696
 0.60  1.6043
 0.60  1.5769
 0.60  2.9245
 0.60  0.1715
 0.60  2.1605
 0.60  0.6856
 1.00  2.2484
 1.00  2.1737
 1.00  1.2545
 1.00  1.8646
 1.00 -1.1131
 1.00  1.1984
 1.00  1.9749
 1.00  0.6253
 1.00  1.3303
 1.00  0.1495
 1.00  0.8871
 1.00  0.5631
 1.00  0.7309
 1.00 -0.7715
 1.00  0.4948
 1.00  0.3031
 1.00  0.4252
 1.00  2.5578
 1.00  1.1289
 1.00  0.9483
 0.00  0.3546
 0.00  0.1365
 0.00 -0.0172
 0.00  0.3675
 0.00  0.3951
 0.00  0.3580
 0.00  0.3129
 0.00 -0.0449
 0.00  0.6231
 0.00  0.0395
 0.00 -0.3084
 0.00 -0.4530
 0.00 -0.2017
 0.00  1.5609
 0.00  0.5613
 0.00  0.3362
 0.00 -0.1594
 0.00  0.9926
 0.00  0.8070
 0.00  1.2374;
run;

*** 6.2 ***;

/* calculate contrasts */
data doses;
   input dose @@;
   datalines;
      0 0.05 0.2 0.6 1
   ;
run;

/* equal sample size and variances: can use identity matrix
for calculation of optimal contrasts */
data scalemat;
   input c1-c5 @@;
   datalines;
      1 0 0 0 0 
      0 1 0 0 0 
      0 0 1 0 0 
      0 0 0 1 0 
      0 0 0 0 1 
   ;
run;

data models;
    length modnam $25;
    input modnam par1-par3;
    datalines;
        emax 0.05 . .   
        emax 0.2  . .   
        exponential 0.3 . .  
        linear  . . .  
        quadratic -0.8 . .  
        sigEmax 0.2 3 .    
        ;
run;

/*Write optimal contrasts in data set optcontrasts and in global
macro variable modcontr */

%optcont(models=models, doses=doses, sigma=scalemat, direction=incr, dosevarname=dose);

proc print data=optcontrasts label noobs;
   title "Optimal contrasts for defined models";
run;

data _null_;
   call execute (" 
      proc glimmix data=biom; 
         class dose; 
         model resp = dose  /NOINT solution COVB ; 
         estimate &modcontr.
         / adjust=simulate(nsamp=1000000 seed=1) uppertailed; 
      run;
   ");
run;

*** 6.3 ***;

proc glimmix data=neurodeg; 
   class dose id; 
   model resp= dose*time/solution COVB ; 
   random intercept time / type=UN subject=id; 
   estimate &modcontr. / adjust=simulate(nsamp=1000000 seed=1) uppertailed;
run;

*** 6.4 ***;

*** Code for %optcont macro ***;

%macro optcont(doses=, 
   models=, 
   sigma=, 
   direction=,
   dosevarname=);
   /**********************************************************************
   Reading in models
   ***********************************************************************/
   data &models;
      set &models;
      length modspec $ 50;

      if compress(modnam)="emax" then
         do modelnum=1;
            modspec="emax "!!compress("(ed50="!!par1!!")");
         end;
      if compress(modnam)="exponential" then
         do modelnum=2;
            modspec="exponential "!!compress("(delta="!!par1!!")");
         end;
      if compress(modnam)="linear" then
         do modelnum=3;
            modspec=modnam;
         end;
      if compress(modnam)="linlog" then
         do modelnum=4;
            modspec="linlog "!!compress("(off="!!par1!!")");
         end;
      if compress(modnam)="quadratic" then
         do modelnum=5;
            modspec="quadratic "!!compress("(delta="!!par1!!")");
         end;
      if compress(modnam)="sigEmax" then
         do modelnum=6;
            modspec="sigemax "!!compress("(ed50="!!par1!!", h="!!par2!!")");
         end;
      if compress(modnam)="betaMod" then
         do modelnum=7;
            modspec="betamod "!!compress("(del1="!!par1!!", del2="!!par2!!",
               scal="!!par3!!")");
         end;
   run;

   proc sql noprint;
      select count(distinct(dose))format=1.0 into :n_dose_ from &doses;
   quit;

   proc sql noprint;
      select count(modelnum) into :n_mod_ from &models;
   quit;

   proc sql noprint;
      select modnam into :mod1 - :mod%left(&n_mod_) from &models;
   quit;

   proc sql noprint;
      select modspec into :modspec1 - :modspec%left(&n_mod_) from &models;
   quit;

   %if &direction=incr %then %do; %let dir=1; %end;
   %if &direction=decr %then %do; %let dir=-1; %end;

   /**********************************************************************
   Calculation of contrasts
    ***********************************************************************/
   proc iml ;
      /* read in doses, covariance mat, models/guesstimates and model names*/
      use &doses var {dose };
      read all into dose;
      use &sigma;
      read all into sigma;
      use &models;
      read all var{modelnum par1 par2 par3} into par;
      use &models;
      read all var{modnam} into modlist;

      /* Unity matrix */
      unity=j(&n_dose_, 1, 1);

      /* Empty matrix for calculated mean vectors and contrasts */
      meanmat=j(&n_dose_, &n_mod_+1, -88);
      meanmat[, 1]=dose;

      /* row labels */
      contmat=j(&n_dose_, &n_mod_, -88);

      /* calculation of stand. mean-vector for each model*/
      do j=2 to &n_mod_+1;   
         modnum=par[j-1, 1];
         do i=1 to &n_dose_;   /* for each dose*/
            if modnum=1 then
               meanmat[i, j]=dose[i]/(par[j-1, 2] + dose[i]);
            if modnum=2 then
               meanmat[i, j]=exp(dose[i]/par[j-1, 2]) - 1;
            if modnum=3 then
               meanmat[i, j]=dose[i];
            if modnum=4 then
               meanmat[i, j]=log(dose[i] + par[j-1, 2]);
            if modnum=5 then
               meanmat[i, j]=dose[i] + par[j-1, 2]*dose[i]**2;
            if modnum=6 then
               meanmat[i, j]=dose[i]**par[j-1, 3]/(par[j-1, 2]**par[j-1, 
                  3] + dose[i]**par[j-1, 3]);
            if modnum=7 then
               do;
                  maxDens=(par[j-1, 2]**par[j-1, 2]) * (par[j-1, 
                     3]**par[j-1, 3])/((par[j-1, 2] + par[j-1, 
                     3])**(par[j-1, 2] + par[j-1, 3]));
                  standdose=dose[i]/par[j-1, 4];
                  meanmat[i, j]=1/maxDens * (standdose**par[j-1, 2]) * 
                     (1 - standdose)**par[j-1, 3];
               end;
         end;
      end;
      invsigma=inv(sigma);

      do j=2 to &n_mod_+1;     /* calculation of contrasts*/
         mean_t=t(meanmat[, j]);
         _1=mean_t*invsigma*unity;
         _2=t(unity)*invsigma*unity;
         _3=_1/_2;
         _4=_3*unity;
         _5=meanmat[, j]-_4;
         contrast=invsigma*_5;
         c_norm=sqrt(ssq(contrast));
         contmat[, j-1]=&dir*contrast/c_norm;
      end;
      create optcontrasts from contmat;

      /* Export the final contrasts to dataset*/
      append from contmat;
      quit;

   data &models;
      set &models;
      i=_n_;
   run;

   data _null_;
      set &models;
      do j=1 to &n_mod_;
         if j=i then
            do;
               call execute ("
   data optcontrasts; set optcontrasts; 
   attrib col"!!compress(j)!!" label='"!!compress(modnam)!!"';
       run;");
            end;
      end;

   data optcontrasts;
      merge &doses(keep=dose) optcontrasts;
   run;

   /**********************************************************************
   Add labels to contrast matrix and
   create string of the contrasts to be used in estimate statement
    **********************************************************************/
   %global modcontr;
   %let modcontr=;

   %do i=1 %to &n_mod_;
      %let k=%eval(&i);

      data optcontrasts;
         set optcontrasts;
         attrib col&i label="&&modspec&k.";

      proc sql noprint;
         select col&i.
       into :cont_&i. separated by '  ' from optcontrasts;
      quit;

      %let type = &&modspec&k;

      %if %eval(&i < &n_mod_) %then
         %do;
            %let modcontr = &modcontr. %str(%'&&modspec&i.%') &dosevarname &&cont_&i.%str(,);
         %end;
      %else %if %eval(&i=&n_mod_) %then
         %do;
            %let modcontr = &modcontr. %str(%'&&modspec&i.%') &dosevarname &&cont_&i. ;
         %end;
   %end;
%mend;

*** 6.5 ***;

*** Code to fit dose-response models in example 1 ***;

/**********************************************************************
Fit all models & compare AIC values
 ***********************************************************************/

/* emax model */
proc nlmixed data=biom;
   ods output FitStatistics=fitem;
   parms e0=0.3 emax=1 ed50=1 sigma=1;
   bounds 0.001 < ed50 < 1.5;   /* bound for ed50: [0.001,1.5]*maxDose */
   mn=e0 + emax*dose/(dose + ed50);
   model resp ~ normal(mn, sigma**2);
run;

data fitem;
   set fitem(where=(descr='AIC (smaller is better)'));
   model="emax";
   drop descr;
run;

/* exponential model */
proc nlmixed data=biom;
   ods output FitStatistics=fitexpo;
   parms e0=0.3 e1=1 delta=1 sigma=1;
   bounds 0.1 < delta < 2;   /* bound for delta: [0.1,2]*maxDose */
   mn=e0 + e1*(exp(dose/delta)-1);
   model resp ~ normal(mn, sigma**2);
run;

data fitexpo;
   set fitexpo(where=(descr='AIC (smaller is better)'));
   model="expo";
   drop descr;
run;

/* linear model (could also be fit with other procedures!) */
proc nlmixed data=biom;
   ods output FitStatistics=fitlin;
   parms e0=0.3 delta=1;
   mn=e0 + delta*dose;
   model resp ~ normal(mn, sigma**2);
run;

data fitlin;
   set fitlin(where=(descr='AIC (smaller is better)'));
   model="lin";
   drop descr;
run;

/* quadratic model (could also be fit with other procedures!) */
proc nlmixed data=biom;
   ods output FitStatistics=fitquad;
   parms e0=0.3 b1=1 b2=1 sigma=1;
   mn=e0 + b1*dose + b2*dose**2;
   model resp ~ normal(mn, sigma**2);
run;

data fitquad;
   set fitquad(where=(descr='AIC (smaller is better)'));
   model="quad";
   drop descr;
run;

/* sigmoid Emax model */
proc nlmixed data=biom;
   ods output FitStatistics=fitsig;
   parms e0=0.3 emax=1 ed50=1 h=1 sigma=1;
   bounds 0.001 < ed50 < 1.5, 0.5 < h < 10;   /* bound for h: [0.5,10] */
   if dose=0 then
      mn=e0;
   if dose > 0 then
      mn=e0 + emax*dose**h/(dose**h + ed50**h);
   model resp ~ normal(mn, sigma**2);
run;

data fitsig;
   set fitsig(where=(descr='AIC (smaller is better)'));
   model="sigemax";
   drop descr;
run;

data aics;
   set fitem fitexpo fitlin fitquad fitsig;
run;
/* compare AICs of different fitted models */
proc print data=aics;
run;

/* emax model has best AIC value */

*** 6.6 ***;

*** Code to produce plot for example 1 ***;

/**********************************************************************
Create a plot showing the results
 ***********************************************************************/
/* data set containing where to predict dose-response curves */
data biompredict;
   do i=1 to 100;
      dosepred=(i-1)/99;
      output;
   end;
   drop i;
run;

data biompredict;
   merge biom biompredict;
run;

/* model fit */
%let deltadiff=0.4;

/* fit emax model and predict at specified grid of dose values */
proc nlmixed data=biompredict;
   ods output FitStatistics=fitem;
   parms e0=0.3 emax=1 ed50=1 sigma=1;
   bounds 0.001 < ed50 < 1.5;
   mn=e0 + emax*dose/(dose + ed50);
   model resp ~ normal(mn, sigma**2);
   predict emax*dosepred/(dosepred + ed50) out=predout;
   estimate 'TD' &deltadiff * ed50/(emax - &deltadiff);
run;

/* create adjusted raw means for plot */
proc sql; 
  create table adj_means as
  select distinct(dose), mean(resp) as mean_resp
  from biom
  group by dose;
run;

data adj_means;
   set adj_means;
   if dose=0 then mean0=mean_resp;
   retain mean0;
   if dose ne 0 then diff=mean_resp-mean0;
run;

data predout;
   set predout adj_means;
   refline=0.4;
run;

/* plot dose-response curve confidence intervals and adjusted raw means */
proc sgplot data=predout;
   xaxis grid label="Dose";
   yaxis grid label="Response (difference to placebo)";
   band x=dosepred lower=lower upper=upper /transparency=0.5 
      legendlabel="95% confidence interval";
   series x=dosepred y=pred /legendlabel="Model Mean" lineattrs=(thickness=3);
   scatter x=dose y=diff / markerattrs=(symbol=circlefilled) 
      legendlabel="Observed difference";
   refline refline / lineattrs=(thickness=2 color=red pattern=shortdash) 
      legendlabel="Target Difference";
run;

*** 6.7 ***;

*** Code to produce results for example 2 ***;

data neurodeg;
   input resp id dose time @@;
   datalines;
191.70155   1    0    0 178.39954   1    0    3 167.33850   1    0    6 149.50935   1    0    9 131.45853   1    0   12 
212.87057   2    0    0 197.16260   2    0    3 172.89532   2    0    6 146.12566   2    0    9 128.12845   2    0   12 
189.80371   3    0    0 174.14271   3    0    3 172.09034   3    0    6 156.40297   3    0    9 152.65568   3    0   12 
202.26751   4    0    0 184.60391   4    0    3 162.83556   4    0    6 143.05246   4    0    9 129.74430   4    0   12 
217.64479   5    0    0 180.57690   5    0    3 156.73785   5    0    6 108.85998   5    0    9  79.07783   5    0   12 
193.68120   6    0    0 171.81880   6    0    3 144.38866   6    0    6 114.32880   6    0    9  94.18205   6    0   12 
201.66027   7    0    0 180.35976   7    0    3 160.65935   7    0    6 141.54250   7    0    9 120.28506   7    0   12 
195.93642   8    0    0 172.60230   8    0    3 157.88344   8    0    6 136.24097   8    0    9 121.41912   8    0   12 
193.42948   9    0    0 189.95512   9    0    3 179.52769   9    0    6 176.20269   9    0    9 169.49898   9    0   12 
201.46033  10    0    0 182.88308  10    0    3 168.40878  10    0    6 157.86255  10    0    9 142.07585  10    0   12 
208.81641  11    0    0 182.80040  11    0    3 153.40780  11    0    6 126.82807  11    0    9  88.20043  11    0   12 
192.12885  12    0    0 181.01305  12    0    3 167.56814  12    0    6 152.29944  12    0    9 148.20762  12    0   12 
188.36643  13    0    0 183.87836  13    0    3 177.17350  13    0    6 178.91469  13    0    9 177.15992  13    0   12 
200.66834  14    0    0 184.52423  14    0    3 163.52616  14    0    6 137.86643  14    0    9 119.26146  14    0   12 
190.67102  15    0    0 180.35081  15    0    3 166.06660  15    0    6 149.14486  15    0    9 143.69618  15    0   12 
194.05056  16    0    0 196.78321  16    0    3 204.59860  16    0    6 204.28331  16    0    9 209.35382  16    0   12 
190.73330  17    0    0 183.77167  17    0    3 183.56324  17    0    6 172.25849  17    0    9 168.02239  17    0   12 
179.50294  18    0    0 168.59432  18    0    3 156.45123  18    0    6 144.67061  18    0    9 134.09813  18    0   12 
203.29157  19    0    0 179.65995  19    0    3 146.60210  19    0    6 117.55997  19    0    9  87.04832  19    0   12 
200.61440  20    0    0 177.15209  20    0    3 157.99832  20    0    6 137.48279  20    0    9 117.61008  20    0   12 
213.35104  21    0    0 191.19527  21    0    3 172.08307  21    0    6 139.59313  21    0    9 125.24064  21    0   12 
209.98428  22    0    0 184.91966  22    0    3 160.95262  22    0    6 131.42284  22    0    9 103.09309  22    0   12 
212.42963  23    0    0 194.53904  23    0    3 160.33030  23    0    6 133.76532  23    0    9 106.81372  23    0   12 
204.18364  24    0    0 199.94065  24    0    3 198.47334  24    0    6 190.59464  24    0    9 180.13343  24    0   12 
203.31452  25    0    0 203.73982  25    0    3 205.41541  25    0    6 199.47116  25    0    9 199.70208  25    0   12 
204.76870  26    0    0 180.14544  26    0    3 171.62340  26    0    6 152.18332  26    0    9 145.45880  26    0   12 
214.98748  27    0    0 183.72492  27    0    3 154.50263  27    0    6 125.17637  27    0    9  97.93185  27    0   12 
216.30072  28    0    0 197.13564  28    0    3 177.03687  28    0    6 157.75830  28    0    9 133.68746  28    0   12 
188.54372  29    0    0 188.03431  29    0    3 173.20501  29    0    6 166.03418  29    0    9 152.77911  29    0   12 
194.71730  30    0    0 182.53584  30    0    3 166.56771  30    0    6 145.50073  30    0    9 146.52927  30    0   12 
201.15590  31    0    0 186.51328  31    0    3 168.37329  31    0    6 156.82070  31    0    9 143.58762  31    0   12 
211.13731  32    0    0 182.52609  32    0    3 162.46505  32    0    6 137.57272  32    0    9 117.04319  32    0   12 
223.81875  33    0    0 188.13002  33    0    3 159.17602  33    0    6 129.24943  33    0    9 100.16425  33    0   12 
213.38125  34    0    0 196.94392  34    0    3 187.09969  34    0    6 179.45786  34    0    9 161.75445  34    0   12 
217.80877  35    0    0 193.50981  35    0    3 165.13223  35    0    6 145.90664  35    0    9 124.39589  35    0   12 
213.43950  36    0    0 176.05206  36    0    3 159.19775  36    0    6 140.22619  36    0    9 104.38660  36    0   12 
186.43625  37    0    0 189.24092  37    0    3 188.56597  37    0    6 188.24229  37    0    9 188.26263  37    0   12 
188.28809  38    0    0 163.97394  38    0    3 169.54222  38    0    6 164.65286  38    0    9 147.25073  38    0   12 
181.54872  39    0    0 188.50512  39    0    3 187.01517  39    0    6 199.57200  39    0    9 205.62477  39    0   12 
200.02052  40    0    0 186.31868  40    0    3 163.86947  40    0    6 143.84314  40    0    9 125.35298  40    0   12 
214.32712  41    0    0 195.03337  41    0    3 174.57647  41    0    6 145.92775  41    0    9 126.35591  41    0   12 
190.52527  42    0    0 181.04484  42    0    3 179.90249  42    0    6 173.85618  42    0    9 162.87810  42    0   12 
199.94246  43    0    0 189.12816  43    0    3 174.92465  43    0    6 165.51681  43    0    9 159.80820  43    0   12 
215.46961  44    0    0 199.05125  44    0    3 175.95903  44    0    6 159.52500  44    0    9 135.35437  44    0   12 
192.71933  45    0    0 182.41377  45    0    3 170.79826  45    0    6 156.96577  45    0    9 138.68454  45    0   12 
206.07087  46    0    0 180.69025  46    0    3 162.96048  46    0    6 141.22984  46    0    9 110.98842  46    0   12 
191.59047  47    0    0 187.20877  47    0    3 181.53745  47    0    6 179.80522  47    0    9 178.71411  47    0   12 
191.80155  48    0    0 189.61428  48    0    3 188.15502  48    0    6 175.57852  48    0    9 175.20917  48    0   12 
193.31984  49    0    0 179.58836  49    0    3 166.13909  49    0    6 157.66793  49    0    9 153.68570  49    0   12 
198.79598  50    0    0 183.59377  50    0    3 175.12462  50    0    6 155.43811  50    0    9 149.73843  50    0   12 
213.17216  51    1    0 203.05404  51    1    3 198.66309  51    1    6 187.74382  51    1    9 186.23971  51    1   12 
203.02407  52    1    0 192.18065  52    1    3 179.19798  52    1    6 169.65057  52    1    9 154.68956  52    1   12 
212.57086  53    1    0 202.90812  53    1    3 209.91957  53    1    6 208.65221  53    1    9 212.74391  53    1   12 
192.03458  54    1    0 185.57669  54    1    3 171.38348  54    1    6 161.58676  54    1    9 157.19190  54    1   12 
194.86244  55    1    0 176.94935  55    1    3 153.16870  55    1    6 128.86101  55    1    9 101.82532  55    1   12 
193.90851  56    1    0 179.63049  56    1    3 160.65779  56    1    6 147.85297  56    1    9 130.92936  56    1   12 
208.99459  57    1    0 196.88615  57    1    3 196.78321  57    1    6 190.47298  57    1    9 188.26270  57    1   12 
200.67017  58    1    0 186.63679  58    1    3 168.38259  58    1    6 155.36380  58    1    9 142.26929  58    1   12 
200.80083  59    1    0 187.44771  59    1    3 170.92164  59    1    6 158.51796  59    1    9 141.48275  59    1   12 
200.75384  60    1    0 192.05909  60    1    3 187.94484  60    1    6 172.71776  60    1    9 172.47604  60    1   12 
189.01883  61    1    0 171.84778  61    1    3 163.77994  61    1    6 144.26791  61    1    9 127.57698  61    1   12 
209.45330  62    1    0 201.17906  62    1    3 193.02815  62    1    6 198.09030  62    1    9 187.82682  62    1   12 
193.49461  63    1    0 185.80732  63    1    3 182.82696  63    1    6 182.32809  63    1    9 176.61094  63    1   12 
209.28630  64    1    0 186.65372  64    1    3 162.26316  64    1    6 142.55140  64    1    9 115.75984  64    1   12 
196.16850  65    1    0 187.04025  65    1    3 179.79640  65    1    6 167.86668  65    1    9 153.65598  65    1   12 
197.10908  66    1    0 200.77752  66    1    3 197.94839  66    1    6 205.56678  66    1    9 202.78508  66    1   12 
179.79742  67    1    0 189.48710  67    1    3 188.61260  67    1    6 190.88298  67    1    9 192.23959  67    1   12 
198.70604  68    1    0 183.72988  68    1    3 170.70960  68    1    6 155.74834  68    1    9 141.13991  68    1   12 
188.77063  69    1    0 168.05942  69    1    3 156.05125  69    1    6 131.93744  69    1    9 116.70167  69    1   12 
195.58626  70    1    0 186.60853  70    1    3 174.31283  70    1    6 174.30073  70    1    9 165.27495  70    1   12 
198.86880  71    1    0 187.81561  71    1    3 171.22143  71    1    6 154.46731  71    1    9 139.41063  71    1   12 
197.20708  72    1    0 199.50278  72    1    3 198.89421  72    1    6 195.69554  72    1    9 194.07291  72    1   12 
201.82969  73    1    0 193.03455  73    1    3 182.30406  73    1    6 173.39890  73    1    9 158.06203  73    1   12 
199.46404  74    1    0 196.05024  74    1    3 189.04922  74    1    6 179.04771  74    1    9 173.28068  74    1   12 
201.63418  75    1    0 185.47775  75    1    3 162.78309  75    1    6 143.47070  75    1    9 122.63108  75    1   12 
197.80945  76    1    0 181.34605  76    1    3 161.93357  76    1    6 131.09043  76    1    9 116.46042  76    1   12 
209.65166  77    1    0 198.02532  77    1    3 189.31981  77    1    6 178.79215  77    1    9 165.88344  77    1   12 
198.58451  78    1    0 183.20376  78    1    3 174.75699  78    1    6 164.88430  78    1    9 143.60010  78    1   12 
201.77702  79    1    0 176.82483  79    1    3 158.73713  79    1    6 128.63360  79    1    9 111.00985  79    1   12 
191.84349  80    1    0 176.59648  80    1    3 158.79859  80    1    6 144.76936  80    1    9 132.68899  80    1   12 
208.59676  81    1    0 180.16548  81    1    3 161.03910  81    1    6 135.57720  81    1    9 114.34133  81    1   12 
182.71487  82    1    0 179.48402  82    1    3 169.56823  82    1    6 161.48641  82    1    9 157.19540  82    1   12 
208.75811  83    1    0 188.89855  83    1    3 181.51400  83    1    6 154.20447  83    1    9 144.28013  83    1   12 
203.21440  84    1    0 177.60850  84    1    3 162.95054  84    1    6 147.92321  84    1    9 123.97702  84    1   12 
204.78906  85    1    0 195.31590  85    1    3 184.05524  85    1    6 175.27478  85    1    9 166.15721  85    1   12 
188.92263  86    1    0 174.97907  86    1    3 160.60041  86    1    6 138.01100  86    1    9 128.07541  86    1   12 
224.15193  87    1    0 195.94772  87    1    3 159.70004  87    1    6 129.21935  87    1    9  91.89976  87    1   12 
196.45414  88    1    0 181.90252  88    1    3 176.05818  88    1    6 162.95925  88    1    9 154.54395  88    1   12 
200.20272  89    1    0 193.84386  89    1    3 180.47407  89    1    6 176.67985  89    1    9 163.32097  89    1   12 
189.80006  90    1    0 187.64246  90    1    3 180.48507  90    1    6 171.95989  90    1    9 161.18546  90    1   12 
212.90851  91    1    0 175.96894  91    1    3 133.06166  91    1    6  93.27985  91    1    9  53.05722  91    1   12 
190.10252  92    1    0 165.60861  92    1    3 141.59489  92    1    6 107.23535  92    1    9  88.53410  92    1   12 
208.99930  93    1    0 184.07419  93    1    3 151.56192  93    1    6 120.22402  93    1    9  94.80659  93    1   12 
211.26098  94    1    0 198.74023  94    1    3 186.76194  94    1    6 183.41305  94    1    9 176.20468  94    1   12 
208.94029  95    1    0 185.01841  95    1    3 163.06449  95    1    6 140.45529  95    1    9 115.91490  95    1   12 
208.74903  96    1    0 178.38856  96    1    3 156.66614  96    1    6 139.12919  96    1    9 122.78333  96    1   12 
199.70825  97    1    0 184.53660  97    1    3 162.38498  97    1    6 155.42504  97    1    9 140.14149  97    1   12 
194.50255  98    1    0 174.60363  98    1    3 154.75568  98    1    6 136.31357  98    1    9 110.30834  98    1   12 
204.54679  99    1    0 186.82777  99    1    3 178.68587  99    1    6 166.06392  99    1    9 162.50687  99    1   12 
191.92347 100    1    0 191.28584 100    1    3 198.45406 100    1    6 188.82478 100    1    9 193.07190 100    1   12 
178.31624 101    3    0 165.57545 101    3    3 139.70627 101    3    6 120.18308 101    3    9  99.69648 101    3   12 
209.73640 102    3    0 200.32542 102    3    3 191.12594 102    3    6 170.96910 102    3    9 163.17282 102    3   12 
206.65375 103    3    0 201.14808 103    3    3 198.59465 103    3    6 187.62537 103    3    9 186.86010 103    3   12 
202.55071 104    3    0 183.08488 104    3    3 169.45773 104    3    6 153.72241 104    3    9 134.48609 104    3   12 
199.65099 105    3    0 193.86906 105    3    3 180.06049 105    3    6 169.37242 105    3    9 158.48308 105    3   12 
204.30929 106    3    0 196.20477 106    3    3 187.96352 106    3    6 177.92194 106    3    9 172.03937 106    3   12 
194.63373 107    3    0 202.24479 107    3    3 206.73988 107    3    6 213.91113 107    3    9 213.31608 107    3   12 
179.73552 108    3    0 167.24651 108    3    3 144.80424 108    3    6 120.53475 108    3    9 103.60460 108    3   12 
192.35494 109    3    0 191.06366 109    3    3 187.61661 109    3    6 173.95949 109    3    9 168.21708 109    3   12 
210.29442 110    3    0 205.25921 110    3    3 188.14302 110    3    6 171.75187 110    3    9 156.80235 110    3   12 
193.05749 111    3    0 173.19048 111    3    3 160.08455 111    3    6 145.17916 111    3    9 134.28933 111    3   12 
218.89818 112    3    0 212.67390 112    3    3 218.07620 112    3    6 214.14744 112    3    9 219.03119 112    3   12 
222.15750 113    3    0 210.42857 113    3    3 195.43293 113    3    6 181.31907 113    3    9 161.25132 113    3   12 
200.11060 114    3    0 199.52824 114    3    3 193.38413 114    3    6 195.22050 114    3    9 189.89889 114    3   12 
189.43339 115    3    0 183.04166 115    3    3 168.06238 115    3    6 162.47325 115    3    9 143.20754 115    3   12 
205.83322 116    3    0 199.52074 116    3    3 197.09070 116    3    6 189.40892 116    3    9 186.76441 116    3   12 
185.22253 117    3    0 174.84278 117    3    3 162.50058 117    3    6 153.08452 117    3    9 139.62517 117    3   12 
204.55766 118    3    0 192.02434 118    3    3 173.72525 118    3    6 167.32361 118    3    9 153.55686 118    3   12 
198.10521 119    3    0 193.68002 119    3    3 191.33402 119    3    6 187.41893 119    3    9 167.85926 119    3   12 
196.36017 120    3    0 188.20099 120    3    3 174.26715 120    3    6 164.08381 120    3    9 151.98552 120    3   12 
207.95557 121    3    0 197.31239 121    3    3 182.07789 121    3    6 161.88604 121    3    9 155.46548 121    3   12 
209.66177 122    3    0 207.12486 122    3    3 200.64638 122    3    6 193.96363 122    3    9 187.17909 122    3   12 
192.28626 123    3    0 173.22773 123    3    3 150.71722 123    3    6 127.26059 123    3    9 109.70621 123    3   12 
183.84364 124    3    0 179.39070 124    3    3 179.16576 124    3    6 180.32947 124    3    9 177.31224 124    3   12 
214.39360 125    3    0 192.19457 125    3    3 174.96559 125    3    6 158.15521 125    3    9 130.43571 125    3   12 
198.32726 126    3    0 197.15029 126    3    3 201.84357 126    3    6 198.90195 126    3    9 201.59535 126    3   12 
191.07724 127    3    0 183.88840 127    3    3 169.06354 127    3    6 157.31217 127    3    9 142.59929 127    3   12 
212.25702 128    3    0 204.60229 128    3    3 197.40839 128    3    6 193.41755 128    3    9 191.42487 128    3   12 
188.56074 129    3    0 182.25720 129    3    3 178.13482 129    3    6 182.92794 129    3    9 176.10819 129    3   12 
184.81700 130    3    0 174.64469 130    3    3 170.36408 130    3    6 163.14290 130    3    9 153.76043 130    3   12 
214.21945 131    3    0 210.84284 131    3    3 216.94245 131    3    6 223.71559 131    3    9 226.04390 131    3   12 
182.05847 132    3    0 185.67792 132    3    3 192.92260 132    3    6 198.24991 132    3    9 202.13235 132    3   12 
185.02721 133    3    0 192.47057 133    3    3 190.89336 133    3    6 191.45591 133    3    9 197.73028 133    3   12 
200.02970 134    3    0 194.10983 134    3    3 190.72366 134    3    6 189.78765 134    3    9 188.21538 134    3   12 
202.38188 135    3    0 198.61201 135    3    3 206.84691 135    3    6 210.37383 135    3    9 207.81860 135    3   12 
202.67570 136    3    0 201.99095 136    3    3 205.73396 136    3    6 202.37712 136    3    9 204.30091 136    3   12 
205.72086 137    3    0 199.49733 137    3    3 191.43332 137    3    6 188.34485 137    3    9 182.55031 137    3   12 
188.88682 138    3    0 179.17313 138    3    3 165.55939 138    3    6 154.25761 138    3    9 141.28151 138    3   12 
208.88583 139    3    0 187.60619 139    3    3 168.95643 139    3    6 148.31022 139    3    9 130.81345 139    3   12 
205.13672 140    3    0 189.21874 140    3    3 171.96601 140    3    6 163.83480 140    3    9 147.03706 140    3   12 
194.07597 141    3    0 186.19191 141    3    3 171.55734 141    3    6 161.38371 141    3    9 152.83221 141    3   12 
200.74576 142    3    0 189.74714 142    3    3 177.70969 142    3    6 172.35289 142    3    9 166.38952 142    3   12 
227.94633 143    3    0 199.59739 143    3    3 174.89421 143    3    6 150.15258 143    3    9 129.67412 143    3   12 
211.16246 144    3    0 199.87137 144    3    3 197.45444 144    3    6 185.78484 144    3    9 172.75861 144    3   12 
201.78005 145    3    0 192.74562 145    3    3 179.91961 145    3    6 174.53462 145    3    9 168.48908 145    3   12 
197.83723 146    3    0 170.13095 146    3    3 136.14704 146    3    6 106.17912 146    3    9  77.43443 146    3   12 
199.51572 147    3    0 184.13296 147    3    3 176.76469 147    3    6 155.37539 147    3    9 142.30793 147    3   12 
194.93005 148    3    0 190.38833 148    3    3 188.26964 148    3    6 180.10038 148    3    9 173.96857 148    3   12 
188.24259 149    3    0 169.64644 149    3    3 152.13458 149    3    6 131.02913 149    3    9 113.48191 149    3   12 
201.11640 150    3    0 184.55457 150    3    3 177.06399 150    3    6 164.26567 150    3    9 144.11442 150    3   12 
212.83971 151   10    0 192.80360 151   10    3 176.61270 151   10    6 156.96240 151   10    9 146.19491 151   10   12 
210.62181 152   10    0 205.18061 152   10    3 195.68371 152   10    6 178.47828 152   10    9 174.14084 152   10   12 
195.02512 153   10    0 177.25012 153   10    3 159.55634 153   10    6 132.86123 153   10    9 118.20764 153   10   12 
215.70232 154   10    0 185.31749 154   10    3 171.06466 154   10    6 151.06969 154   10    9 126.70266 154   10   12 
193.67472 155   10    0 192.02119 155   10    3 185.60491 155   10    6 182.52620 155   10    9 182.97266 155   10   12 
211.94484 156   10    0 195.17222 156   10    3 173.43063 156   10    6 153.98079 156   10    9 132.44740 156   10   12 
199.24091 157   10    0 181.33452 157   10    3 178.10648 157   10    6 161.50325 157   10    9 150.35393 157   10   12 
209.59520 158   10    0 215.08198 158   10    3 215.93663 158   10    6 221.54162 158   10    9 222.50992 158   10   12 
196.32619 159   10    0 190.42548 159   10    3 171.67032 159   10    6 160.48521 159   10    9 148.89306 159   10   12 
201.58768 160   10    0 174.21551 160   10    3 146.54608 160   10    6 122.84476 160   10    9  99.91728 160   10   12 
178.01801 161   10    0 182.19085 161   10    3 188.90067 161   10    6 192.36307 161   10    9 201.65293 161   10   12 
230.35952 162   10    0 202.03302 162   10    3 177.80526 162   10    6 152.10399 162   10    9 126.89899 162   10   12 
202.82556 163   10    0 179.51430 163   10    3 163.89661 163   10    6 144.37108 163   10    9 130.80116 163   10   12 
216.12383 164   10    0 205.36214 164   10    3 196.46842 164   10    6 188.47681 164   10    9 177.63042 164   10   12 
190.70502 165   10    0 188.89542 165   10    3 176.54067 165   10    6 168.80570 165   10    9 164.23146 165   10   12 
190.20483 166   10    0 203.61645 166   10    3 211.07260 166   10    6 226.12186 166   10    9 236.77027 166   10   12 
197.09832 167   10    0 184.66600 167   10    3 167.31585 167   10    6 159.69717 167   10    9 150.44218 167   10   12 
194.75888 168   10    0 192.30415 168   10    3 182.05836 168   10    6 179.33413 168   10    9 169.88859 168   10   12 
200.03964 169   10    0 184.85949 169   10    3 177.11613 169   10    6 170.10378 169   10    9 163.63865 169   10   12 
200.83878 170   10    0 171.98354 170   10    3 156.55156 170   10    6 130.82774 170   10    9 103.53842 170   10   12 
189.66872 171   10    0 179.80524 171   10    3 177.53576 171   10    6 173.46369 171   10    9 165.80102 171   10   12 
202.60107 172   10    0 207.86445 172   10    3 217.45310 172   10    6 211.84733 172   10    9 224.28530 172   10   12 
187.80123 173   10    0 182.36960 173   10    3 184.36695 173   10    6 184.52135 173   10    9 181.24296 173   10   12 
190.26847 174   10    0 172.67402 174   10    3 160.87098 174   10    6 148.10963 174   10    9 127.85003 174   10   12 
202.14036 175   10    0 196.14591 175   10    3 189.01732 175   10    6 178.54832 175   10    9 167.67564 175   10   12 
197.79807 176   10    0 188.49333 176   10    3 178.62353 176   10    6 173.36388 176   10    9 163.98768 176   10   12 
210.91321 177   10    0 205.13492 177   10    3 195.27781 177   10    6 184.25457 177   10    9 178.71407 177   10   12 
188.05059 178   10    0 174.39008 178   10    3 158.86329 178   10    6 136.47827 178   10    9 124.01724 178   10   12 
208.04726 179   10    0 203.33858 179   10    3 191.76551 179   10    6 183.70237 179   10    9 170.60250 179   10   12 
193.48772 180   10    0 194.47585 180   10    3 187.71182 180   10    6 188.59665 180   10    9 187.01094 180   10   12 
223.78668 181   10    0 194.52255 181   10    3 174.40327 181   10    6 152.22158 181   10    9 118.14728 181   10   12 
194.03973 182   10    0 175.09558 182   10    3 152.47852 182   10    6 138.59170 182   10    9 123.27923 182   10   12 
205.69766 183   10    0 192.24786 183   10    3 185.28362 183   10    6 171.19780 183   10    9 166.85621 183   10   12 
210.26807 184   10    0 203.31047 184   10    3 183.04821 184   10    6 178.13300 184   10    9 167.25539 184   10   12 
185.61057 185   10    0 191.08182 185   10    3 207.18771 185   10    6 211.31006 185   10    9 222.34473 185   10   12 
196.70092 186   10    0 193.69580 186   10    3 182.72642 186   10    6 184.20376 186   10    9 175.16732 186   10   12 
188.33937 187   10    0 196.39009 187   10    3 207.95727 187   10    6 203.45619 187   10    9 203.63858 187   10   12 
194.93510 188   10    0 199.86368 188   10    3 209.05819 188   10    6 212.71578 188   10    9 219.66405 188   10   12 
207.70750 189   10    0 199.22401 189   10    3 197.34627 189   10    6 196.09129 189   10    9 191.97232 189   10   12 
187.63650 190   10    0 189.21620 190   10    3 185.20125 190   10    6 185.89040 190   10    9 187.79379 190   10   12 
205.72727 191   10    0 190.61842 191   10    3 178.01475 191   10    6 160.76594 191   10    9 140.71942 191   10   12 
201.59126 192   10    0 184.34631 192   10    3 161.32351 192   10    6 135.82252 192   10    9 114.91366 192   10   12 
195.95246 193   10    0 187.05343 193   10    3 170.51016 193   10    6 170.53408 193   10    9 163.36532 193   10   12 
208.19054 194   10    0 202.78316 194   10    3 194.01358 194   10    6 190.63686 194   10    9 190.10043 194   10   12 
192.03079 195   10    0 192.55019 195   10    3 189.23222 195   10    6 190.82648 195   10    9 187.40797 195   10   12 
213.91654 196   10    0 200.72367 196   10    3 190.70046 196   10    6 181.72014 196   10    9 165.98321 196   10   12 
206.10834 197   10    0 207.18728 197   10    3 208.76104 197   10    6 201.02853 197   10    9 209.54360 197   10   12 
202.54573 198   10    0 187.33981 198   10    3 182.52429 198   10    6 166.01402 198   10    9 155.15995 198   10   12 
189.66971 199   10    0 198.56281 199   10    3 209.77931 199   10    6 215.21652 199   10    9 221.98571 199   10   12 
203.86574 200   10    0 186.18359 200   10    3 185.46891 200   10    6 167.20002 200   10    9 158.27343 200   10   12 
202.70173 201   30    0 194.62113 201   30    3 197.29163 201   30    6 190.46229 201   30    9 184.55408 201   30   12 
196.75301 202   30    0 185.95945 202   30    3 173.39667 202   30    6 161.21126 202   30    9 147.92047 202   30   12 
209.46630 203   30    0 196.63512 203   30    3 190.29069 203   30    6 167.94934 203   30    9 159.72625 203   30   12 
191.49486 204   30    0 187.50462 204   30    3 176.36606 204   30    6 171.79847 204   30    9 160.57205 204   30   12 
202.03586 205   30    0 186.38222 205   30    3 178.83608 205   30    6 172.05439 205   30    9 162.00824 205   30   12 
203.62349 206   30    0 193.58234 206   30    3 188.01328 206   30    6 176.26678 206   30    9 167.35522 206   30   12 
210.01848 207   30    0 187.62615 207   30    3 163.40137 207   30    6 141.97424 207   30    9 119.10129 207   30   12 
208.65447 208   30    0 202.53125 208   30    3 194.34041 208   30    6 185.40749 208   30    9 184.32236 208   30   12 
195.54360 209   30    0 179.94160 209   30    3 159.22482 209   30    6 148.18418 209   30    9 129.09672 209   30   12 
208.57643 210   30    0 194.53509 210   30    3 192.52684 210   30    6 188.87665 210   30    9 171.46165 210   30   12 
215.12948 211   30    0 203.10992 211   30    3 178.07632 211   30    6 159.41879 211   30    9 147.24387 211   30   12 
208.44961 212   30    0 190.21620 212   30    3 160.72386 212   30    6 144.56194 212   30    9 122.75526 212   30   12 
208.59679 213   30    0 195.31125 213   30    3 191.57887 213   30    6 179.98867 213   30    9 175.37601 213   30   12 
197.96249 214   30    0 178.20482 214   30    3 157.78538 214   30    6 141.14596 214   30    9 120.53263 214   30   12 
206.33202 215   30    0 206.14972 215   30    3 211.02120 215   30    6 217.32797 215   30    9 219.41068 215   30   12 
198.70174 216   30    0 191.21575 216   30    3 189.15981 216   30    6 181.01062 216   30    9 187.13318 216   30   12 
193.43528 217   30    0 193.02553 217   30    3 193.79692 217   30    6 194.09941 217   30    9 199.90240 217   30   12 
211.15572 218   30    0 187.92558 218   30    3 157.13487 218   30    6 138.44085 218   30    9 108.48481 218   30   12 
200.56858 219   30    0 203.92312 219   30    3 197.22818 219   30    6 187.01028 219   30    9 187.40515 219   30   12 
206.79208 220   30    0 182.81181 220   30    3 172.22337 220   30    6 151.35808 220   30    9 127.93713 220   30   12 
198.06364 221   30    0 208.16658 221   30    3 207.00202 221   30    6 202.21005 221   30    9 206.31298 221   30   12 
204.44925 222   30    0 185.98676 222   30    3 172.20092 222   30    6 167.14320 222   30    9 153.84526 222   30   12 
220.83031 223   30    0 178.31146 223   30    3 136.02342 223   30    6  97.68267 223   30    9  63.00544 223   30   12 
199.19254 224   30    0 189.68021 224   30    3 176.36625 224   30    6 168.27813 224   30    9 160.83715 224   30   12 
184.24834 225   30    0 178.12899 225   30    3 171.76126 225   30    6 170.61203 225   30    9 164.81668 225   30   12 
197.02815 226   30    0 197.50465 226   30    3 200.82429 226   30    6 197.89228 226   30    9 200.33726 226   30   12 
181.88121 227   30    0 180.04383 227   30    3 175.37036 227   30    6 177.27838 227   30    9 173.62091 227   30   12 
201.77720 228   30    0 194.25564 228   30    3 184.75696 228   30    6 180.22070 228   30    9 178.51132 228   30   12 
188.28718 229   30    0 192.48388 229   30    3 186.02389 229   30    6 187.39063 229   30    9 188.68887 229   30   12 
163.97394 230   30    0 172.01822 230   30    3 185.80600 230   30    6 188.00731 230   30    9 195.81850 230   30   12 
200.62167 231   30    0 191.79611 231   30    3 184.24932 231   30    6 177.11926 231   30    9 167.92524 231   30   12 
212.04368 232   30    0 197.90284 232   30    3 178.47151 232   30    6 167.10300 232   30    9 149.71624 232   30   12 
200.81365 233   30    0 179.12099 233   30    3 168.56502 233   30    6 152.51140 233   30    9 132.29586 233   30   12 
192.54462 234   30    0 186.34773 234   30    3 181.03251 234   30    6 174.38967 234   30    9 165.61878 234   30   12 
201.56776 235   30    0 175.88715 235   30    3 143.33667 235   30    6 120.79764 235   30    9 103.48247 235   30   12 
217.12334 236   30    0 205.62516 236   30    3 184.22345 236   30    6 160.77440 236   30    9 145.15976 236   30   12 
216.75610 237   30    0 195.36780 237   30    3 173.99680 237   30    6 155.80976 237   30    9 134.80552 237   30   12 
192.02095 238   30    0 176.10881 238   30    3 165.52568 238   30    6 151.93436 238   30    9 137.49241 238   30   12 
198.00630 239   30    0 198.85405 239   30    3 194.72934 239   30    6 195.99920 239   30    9 188.53002 239   30   12 
210.94893 240   30    0 199.28915 240   30    3 193.18126 240   30    6 180.03765 240   30    9 170.85916 240   30   12 
199.45900 241   30    0 187.83870 241   30    3 174.52096 241   30    6 150.71758 241   30    9 138.05091 241   30   12 
200.67734 242   30    0 184.75810 242   30    3 175.54467 242   30    6 164.82813 242   30    9 150.90149 242   30   12 
196.27690 243   30    0 187.35746 243   30    3 175.64742 243   30    6 157.62737 243   30    9 139.57566 243   30   12 
216.83526 244   30    0 193.87228 244   30    3 177.93585 244   30    6 156.95666 244   30    9 137.94281 244   30   12 
181.00381 245   30    0 194.15791 245   30    3 207.03953 245   30    6 211.31502 245   30    9 222.45170 245   30   12 
189.83340 246   30    0 191.45482 246   30    3 181.01112 246   30    6 172.49189 246   30    9 166.74305 246   30   12 
203.02380 247   30    0 186.84043 247   30    3 164.47064 247   30    6 151.34271 247   30    9 128.69802 247   30   12 
193.38091 248   30    0 195.11231 248   30    3 198.95661 248   30    6 209.23325 248   30    9 204.67381 248   30   12 
192.81562 249   30    0 182.24991 249   30    3 172.04968 249   30    6 172.73024 249   30    9 163.21109 249   30   12 
205.09590 250   30    0 175.24421 250   30    3 152.41340 250   30    6 113.48094 250   30    9  84.95754 250   30   12 
;

   /* # of doses */
proc sql noprint;
   select count(distinct(dose))format=1.0 into :n_dose from neurodeg;
quit;

/* initial model to obtain the matrix for calculation of the contrasts */
ods output CovB=Omega (keep=effect col2-col6) 
   ParameterEstimates=beta (where=(Effect ne "Intercept"));

proc glimmix data=neurodeg;
   class dose id;
   model resp=dose*time/solution COVB;
   random intercept time / type=UN subject=id;
run;

data omega;
   set omega;
   where effect ne "Intercept";
   drop effect;
run;

data models;
   length modnam $25;
   input modnam par1-par3;
   datalines;
emax 1.11 . . 
quadratic -0.022  . . 
exponential 8.867 . . 
linear  . . . 
;
run;

data doses;
   input dose @@;
   datalines;
      0 1 3 10 30
      ;
run;

/* calculate optimal contrast based on candidate models and covariance matrix */
%optcont(models=models, doses=doses, sigma=omega, direction=incr, dosevarname=dose*time);
%put &modcontr;

data _null_;
   call execute (" 
proc glimmix data=neurodeg; 
   class dose id;
   model resp= dose*time/solution COVB ;
   random intercept time / type=UN subject=id;
   estimate &modcontr.
      / adjust=simulate(nsamp=1000000 seed=1) uppertailed; 
run;");
run;

/* Run bootstrap simulations to get estimates and CI for dose-response estimates*/
proc iml ;
   /*initiation step*/
   call randseed(1);
   nsim=10000;

   /* read-in data */
   use omega;
   read all var {col2 col3 col4 col5 col6} into cv;
   use beta;
   read all var {Estimate} into mn;
   read all var {dose} into dose;

   /* model fitting */
   /* additional variables needed later on */
   invs=inv(cv);
   nd=nrow(dose);
   predmn=mn;
   resp=mn;

   /* define functions to optimize for different models */
   start fnglsemax(par) global(dose, resp, invs, predmn, nd);

   do i=1 to nd;
      predmn[i]=par[1]+par[2]*dose[i]/(dose[i] + par[3]);
   end;
   dif=(predmn-resp);
   return(dif`*invs*dif);
   finish fnglsemax;
   start fnglsexpo(par) global(dose, resp, invs, predmn, nd);

   do i=1 to nd;
      predmn[i]=par[1]+par[2]*(exp(dose[i]/par[3])-1);
   end;
   dif=(predmn-resp);
   return(dif`*invs*dif);
   finish fnglsexpo;
   start fnglslin(par) global(dose, resp, invs, predmn, nd);

   do i=1 to nd;
      predmn[i]=par[1]+par[2]*dose[i];
   end;
   dif=(predmn-resp);
   return(dif`*invs*dif);
   finish fnglslin;
   start fnglsquad(par) global(dose, resp, invs, predmn, nd);

   do i=1 to nd;
      predmn[i]=par[1]+par[2]*dose[i]+par[3]*dose[i]**2;
   end;
   dif=(predmn-resp);
   return(dif`*invs*dif);
   finish fnglsquad;

   /* macro to fit models */
   %macro gfitmod(savestart=);
      optn={. . . . . . . . . . .};

      /* emax */
      con={. . 0.03, . . 45};      /* bounds: [0.01,1.5]*maxDose for ED50 */
      call nlpqn(rc, xr, "fnglsemax", stemax, optn, con);
      dim=ncol(xr);
      gaicemax=2*fnglsemax(xr)+2*dim;
      paremax=xr;

      if &savestart=1 then
         stemax=xr;

      /* exponential */
      con={. . 3, . . 60};      /* bounds: [0.1,2]*maxDose for delta */
      call nlpqn(rc, xr, "fnglsexpo", stexpo, optn, con);
      dim=ncol(xr);
      gaicexpo=2*fnglsexpo(xr)+2*dim;
      parexpo=xr;

      if &savestart=1 then
         stexpo=xr;

      /* linear */
      start={0 0};
      con={. . , . .};
      call nlpqn(rc, xr, "fnglslin", start, optn, con);
      dim=ncol(xr);
      gaiclin=2*fnglslin(xr)+2*dim;
      parlin=xr;

      /* quadratic */
      start={0 0 0};
      con={. . . , . . . };
      call nlpqn(rc, xr, "fnglsquad", start, optn, con);
      dim=ncol(xr);
      gaicquad=2*fnglsquad(xr)+2*dim;
      parquad=xr;
   %mend;

   /* fit to original data to get good starting values*/
   stemax={-5 2 10};
   stexpo={-5 1.5 40};
   %gfitmod(savestart=1);

   /* sample from multivariate normal distribution and fit models */
   emaxdat=j(nsim, 4, 0);
   expodat=j(nsim, 4, 0);
   quaddat=j(nsim, 4, 0);
   lindat=j(nsim, 3, 0);

   do i=1 to nsim;
      resp=t(randnormal(1, mn, cv));
      %gfitmod(savestart=0);
      emaxdat[i, ]=gaicemax||paremax;
      expodat[i, ]=gaicexpo||parexpo;
      quaddat[i, ]=gaicquad||parquad;
      lindat[i, ]=gaiclin||parlin;
   end;
   create emaxdat from emaxdat[colname={'emax_gaic' 'emax_e0' 'emax_emax' 
      'emax_ed50'}];
   append from emaxdat;
   close emaxdat;
   create expodat from expodat[colname={'expo_gaic' 'expo_e0' 'expo_e1' 
      'expo_delta'}];
   append from expodat;
   close expodat;
   create quaddat from quaddat[colname={'quad_gaic' 'quad_e0' 'quad_b1' 
      'quad_b2'}];
   append from quaddat;
   close quaddat;
   create lindat from lindat[colname={'lin_gaic' 'lin_e0' 'lin_delta'}];
   append from lindat;
   close lindat;
   quit;

   /* postprocessing in data step */
data simresults;
   merge emaxdat expodat quaddat lindat;
   min_gaic=min(emax_gaic, expo_gaic, quad_gaic, lin_gaic);
   array doseresp(101);

   if(emax_gaic=min_gaic) then
      do;
         do i=1 to 101;
            dose=(i-1)/100*30;
            doseresp(i)=emax_emax*dose/(emax_ed50+dose);
         end;
      bestmod='emax';
      end;

   if(expo_gaic=min_gaic) then
      do;
         do i=1 to 101;
            dose=(i-1)/100*30;
            doseresp(i)=expo_e1*(exp(dose/expo_delta)-1);
         end;
      bestmod='exponential';
      end;

   if(lin_gaic=min_gaic) then
      do;
         do i=1 to 101;
            dose=(i-1)/100*30;
            doseresp(i)=lin_delta*dose;
         end;
      bestmod='linear';
      end;

   if(quad_gaic=min_gaic) then
      do;
         do i=1 to 101;
            dose=(i-1)/100*30;
            doseresp(i)=quad_b1*dose+quad_b2*dose**2;
         end;
      bestmod='quadratic';
      end;
   drop i dose;
run;

/* which model is selected how often?  */
proc freq data=simresults;
   tables bestmod;
run;

/* create plot of boostrap quantiles */
proc univariate data=simresults noprint;
   var doseresp1-doseresp101;
   output out=quant25 pctlpts=2.5 pctlpre=dose1-dose101 pctlname=P5;
   output out=quant50 pctlpts=50 pctlpre=dose1-dose101 pctlname=P5;
   output out=quant975 pctlpts=97.5 pctlpre=dose1-dose101 pctlname=P5;
run;

data quant;
   set quant25 quant50 quant975;
run;

proc transpose data=quant out=tquant;
run;

data dosevar;
   do i=1 to 101;
      dose=(i-1)/100*30;
      output;
   end;
   drop i;
run;

data tquant;
   set tquant;
   set dosevar;
run;

data rawest;
   input doseobs diff;
   datalines;
1 0.518
3 1.879
10 2.220
30 1.579
;
run;

data tquant;
   set tquant rawest;
run;

proc sgplot data=tquant;
   xaxis grid label="Dose";
   yaxis grid label="Response (difference to placebo)";
   band x=dose lower=col1 upper=col3 /transparency=0.5 
      legendlabel="95% confidence interval";
   series x=dose y=col2 /legendlabel="Model Mean" lineattrs=(thickness=3);
   scatter x=doseobs y=diff / markerattrs=(symbol=circlefilled) 
      legendlabel="Estimated slopes from LME model";
run;
